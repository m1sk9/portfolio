---
import Layout from '../organisms/Layout.astro';
import { css } from '../../styled-system/css';
import { center, grid } from '../../styled-system/patterns';
import { readFile } from 'fs/promises';

interface ProjectProps {
  name: string;
  description: string;
  repository: string;
}

const allProjects: ProjectProps[] = JSON.parse(
  await readFile('public/project-data.json', 'utf-8')
);
const allBlogPosts = await Astro.glob('./blog/posts/**/*.md');
---

<Layout title="m1sk9's portfolio">
  <body>
    <div
      class={center({
        flexDirection: 'column',
        h: 'full',
        mb: 10
      })}
    >
      <img
        class={css({ borderRadius: 50 })}
        src="./icon.jpg"
        width="100"
        height="100"
        alt="m1sk9 のアイコン"
      />
      <h1 class={css({ textStyle: 'h1', mt: 2 })}>Hi there! 👋</h1>

      <div class={css({ textStyle: 'body', mt: 5 })}>
        <p>I'm m1sk9.</p>
        <p>
          I'm an engineer studying computer science at university. I like
          statically typed languages. I often write TypeScript and Rust.
        </p>
      </div>
    </div>

    <div>
      <h2 class={css({ textStyle: 'h2' })}>Projects</h2>
      <div
        class={grid({
          gridTemplateColumns: { base: 2 },
          gap: 3,
          mt: 3
        })}
      >
        {
          allProjects.map((project) => {
            return (
              <article class={css({ border: '1px dashed gray', p: 3 })}>
                <a
                  href={new URL(project.repository, 'https://github.com').href}
                  class={css({ textStyle: 'body' })}
                >
                  {project.name}
                  <p class={css({ textStyle: 'caption', color: 'gray' })}>
                    {project.description}
                  </p>
                </a>
              </article>
            );
          })
        }
      </div>
    </div>

    <div class={css({ mt: 10 })}>
      <a href="/blog" class={css({ textStyle: 'h2' })}>Blog</a>
      <div
        class={grid({
          gridTemplateColumns: { base: 2 },
          gap: 3,
          mt: 3
        })}
      >
        {
          allBlogPosts
            .sort(
              (a, b) =>
                new Date(b.frontmatter.date).getTime() -
                new Date(a.frontmatter.date).getTime()
            )
            .filter((post) => post.frontmatter.published)
            .slice(0, 4)
            .map((post) => (
              <article class={css({ border: '1px dashed gray', p: 3 })}>
                <a href={post.url}>
                  <p
                    class={css({
                      fontSize: 12,
                      textStyle: 'body',
                      color: 'gray'
                    })}
                  >
                    {post.frontmatter.published_at}
                  </p>
                  <p
                    class={css({
                      fontSize: 16,
                      textStyle: 'body'
                    })}
                  >
                    {post.frontmatter.title}
                  </p>
                  <p
                    class={css({
                      textStyle: 'caption',
                      color: 'gray'
                    })}
                  >
                    {post.frontmatter.description}
                  </p>
                </a>
              </article>
            ))
        }
      </div>
    </div>
  </body>
</Layout>
